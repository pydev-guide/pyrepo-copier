# https://peps.python.org/pep-0517/
[build-system]
requires = ["hatchling"{%- if git_versioning -%}, "hatch-vcs"{%- endif %}]
build-backend = "hatchling.build"
{%- if git_versioning %}

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.version]
source = "vcs"
{%- endif %}

# read more about configuring hatch at:
# https://hatch.pypa.io/latest/config/build/
[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

# https://peps.python.org/pep-0621/
[project]
name = "{{project_name}}"
{% if git_versioning -%}
dynamic = ["version"]
{%- else -%}
version = "0.1.0"
{%- endif %}
description = "{{ project_short_description }}"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "{{ project_license }}" }
authors = [{ name = "{{ author_name }}", email = "{{ author_email }}" }]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    {%- if project_license == "MIT" %}
    "License :: OSI Approved :: MIT License",
    {%- elif project_license == "Apache-2.0" %}
    "License :: OSI Approved :: Apache Software License",
    {%- elif project_license == "BSD-3-Clause" %}
    "License :: OSI Approved :: BSD License",
    {%- elif project_license == "GPL-3.0" %}
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    {%- endif %}
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
# add your package dependencies here
dependencies = []

# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
# "extras" (e.g. for `pip install .[test]`)
[project.optional-dependencies]
# add dependencies used for testing here
test = ["pytest", "pytest-cov"]
# add anything else you like to have in your dev environment here
dev = [
    {%- if use_black %}
    "black",{%- endif %}
    "ipython",
    {%- if use_mypy %}
    "mypy",{%- endif %}
    "pdbpp",  # https://github.com/pdbpp/pdbpp
    {%- if use_precommit %}
    "pre-commit",{%- endif %}
    "rich",  # https://github.com/Textualize/rich
    {%- if use_ruff %}
    "ruff",{%- endif %}
]

[project.urls]
{% if github_username -%}
homepage = "https://github.com/{{github_username}}/{{project_name}}"
repository = "https://github.com/{{github_username}}/{{project_name}}"
{%- else -%}
# homepage = ""
# repository = ""
{%- endif %}

# Entry points
# https://peps.python.org/pep-0621/#entry-points
# same as console_scripts entry point
# [project.scripts]
# {{project_name}}-cli = "{{module_name}}:main_cli"

# [project.entry-points."some.group"]
# tomatoes = "{{module_name}}:main_tomatoes"

{% if use_ruff -%}
# https://docs.astral.sh/ruff
[tool.ruff]
line-length = 88
target-version = "py38"
src = ["src"]
# https://docs.astral.sh/ruff/rules
select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "D",    # pydocstyle
    "I",    # isort
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
]
# This is to get numpy-style docstrings AND retain D417
# (Missing argument descriptions in the docstring)
# otherwise, see:
# https://docs.astral.sh/ruff/faq/#does-ruff-support-numpy-or-google-style-docstrings
# https://github.com/astral-sh/ruff/issues/2606
ignore = [
    "D100", # Missing docstring in public module
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D401", # First line should be in imperative mood
    "D413", # Missing blank line after last section
    "D416", # Section name should end with a colon
]

[tool.ruff.per-file-ignores]
"tests/*.py" = ["D", "S"]
"setup.py" = ["D"]
{%- endif -%}
{%- if use_mypy %}

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true

# # module specific overrides
# [[tool.mypy.overrides]]
# module = ["numpy.*",]
# ignore_errors = true
{%- endif %}

# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
filterwarnings = ["error"]

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
    "pass",
]
show_missing = true

[tool.coverage.run]
source = ["{{module_name}}"]

# https://github.com/mgedmin/check-manifest#configuration
# add files that you want check-manifest to explicitly ignore here
# (files that are in the repo but shouldn't go in the package)
[tool.check-manifest]
ignore = [
    ".pre-commit-config.yaml",
    ".ruff_cache/**/*",
    "tests/**/*",
]
