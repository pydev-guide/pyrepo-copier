# ---------- CONFIG --------

_subdirectory: project
_skip_if_exists:
  - README.md

# Tasks to execute after generating or updating a project.
# _tasks:
#   - git init -q --initial-branch=main || true
#   - "{{ use_pre_commit }} && pre-commit autoupdate || echo 'please run: pip install pre-commit && pre-commit autoupdate'"
#   - git add . &&
#     git commit -q -m 'initial commit' &&
#     echo 'git repo initialized' || echo 'git init failed'

# ---------- PROMPT --------

# https://copier.readthedocs.io/en/stable/configuring/#questions

mode:
  help: "Welcome! Please select a mode:"
  type: str
  default: tooling
  choices:
    âœ¨ Fully featured - default tooling: tooling
    ðŸ“¦ Simple package - minimal tooling: simple
    ðŸ™‹ Customize - ask me questions: customize

project_name:
  help: Name of your project (prefer hyphens to underscores)
  default: my-project
  validator: >-
    {% if not (project_name | regex_search('^[a-zA-Z][a-zA-Z0-9\_\-]+$')) %}
    project_name must start with a letter, followed one or more letters, digits, hyphens, or underscores all lowercase.
    {% endif %}

module_name:
  help: Name of your top level python module (what you will import)
  default: "{{ project_name.lower().replace(' ', '_').replace('-', '_') }}"
  validator: "{% if not module_name.isidentifier() %}Invalid module name{% endif %}"

author_name:
  help: Your full name (used in the project metadata)
  default: Your Name

author_email:
  help: Your email address (used in the project metadata)
  default: first.last@example.com
  validator: "{% if '@' not in author_email or '.' not in author_email %}Invalid Email{% endif %}"

project_short_description:
  help: A short description of the package
  default: Package description.

project_license:
  when: "{{ mode == 'customize' }}"
  help: What license would you like to use? (https://choosealicense.com/)
  type: str
  default: BSD-3-Clause
  choices:
    BSD-3-Clause: BSD-3-Clause
    MIT: MIT
    Apache-2.0: Apache-2.0
    GNU GPLv3: GPL-3.0
    none: none

git_versioning:
  when: "{{ mode == 'customize' }}"
  type: bool
  default: "{{ mode != 'simple' }}"
  help: How would you like to control versioning?
  choices:
    "Hardcoded __version__ attribute": false
    "Derive from git tags": true

github_username:
  help: |
    Your GitHub username/organization name
       (If you plan to put your project on GitHub)
  default: ""

test_pre_release:
  when: "{{ mode == 'customize' }}"
  help: |
    Would you like to run tests against dependecy pre-releases
       on a Github Actions cron job?
  type: bool
  default: "{{ mode != 'simple' }}"

use_pre_commit:
  when: "{{ mode == 'customize' }}"
  type: bool
  help: Would you like to add a pre-commit configuration (linting, formatting, ...)?
  default: "{{ mode != 'simple' }}"

use_black:
  when: "{{ mode == 'customize' and use_pre_commit }}"
  type: bool
  help: Add black for code formatting?
  default: "{{ mode != 'simple' }}"

use_ruff:
  when: "{{ mode == 'customize' and use_pre_commit }}"
  type: bool
  help: Add ruff for linting?
  default: "{{ mode != 'simple' }}"

use_mypy:
  when: "{{ mode == 'customize' and use_pre_commit }}"
  type: bool
  help: Add mypy for static type checking on type hints?
  default: "{{ mode != 'simple' }}"
